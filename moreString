public class moreString {
    
    //  AS A CLASS, THESE ARE ELABORATIONS OF STRING METHODS; OR THEY MAY BE SPECIFICALLY-PURPOSEFUL STRING METHODS
    //  RELATING AS HELPERS, TO OTHER CLASSES WE HAVE DEPLOYED... 
    //  SOME HAVE BEEN REPLACED WITH NICE REGEXES!!! :)


    
    
    public static string justnumbers(string userinput)  {
        
        integer itemlen;
        integer uu;
        string tmp = '';
        string newitem = '';
        
        if (!string.isblank(userinput)) {
            itemlen = userinput.length();    
            for (uu = 0; uu < itemlen; uu++) {
                tmp = userinput.substring(uu, uu + 1);
                if (tmp.isnumeric()) {
                    newitem += tmp;
                    continue;
                }        
            }
        }
        system.debug(newitem);
        return newitem;
    }
    
    
    
    public static string givebacknumbers(string userinput)  {
        
        integer itemlen;
        integer uu;
        string tmp = '';
        string newitem = '';
        
        itemlen = userinput.length();    
        for (uu = 0; uu < itemlen; uu++) {
            tmp = userinput.substring(uu, uu + 1);
            if (tmp.isnumeric()) {
                newitem += tmp;
                continue;
            }        
        }
        system.debug(newitem);
        return newitem;
    }

//		RETURNS MILITARY TIME FOR ENCODED INPUTS AND VALIDATES NUMERIC RANGE OF STRING INPUTS AS TIME VALUES 
//		RETURNS NULL FOR BAD INPUT
		   
    public static string militarytime (string userinput) {
        
        string zulutime = '';
        integer addtime = 0;
        integer basetime;
        integer ztime;
        integer inputasnumber;
        integer minutesasnumber;
        
        if (!string.isblank(userinput)) {
            inputasnumber = integer.valueof(morestring.justnumbers(userinput));
            minutesasnumber = integer.valueof(morestring.justnumbers(userinput.right(2)));               
        } 
        
        
        
        if (inputasnumber != null && inputasnumber < 1260 && minutesasnumber < 60) {
            
            if ((userinput.containsignorecase('p') || userinput.contains('+')) && inputasnumber < 1200) {
                addtime = 1200;            
            }
            
            else if (!userinput.containsignorecase('p') && !userinput.contains('+') && inputasnumber > 1199) {
                addtime = -1200;
            }
            
            userinput = morestring.givebacknumbers(userinput);
            basetime = integer.valueof(userinput);
            ztime = basetime + addtime;
            zulutime = string.valueof(ztime);    
        }
        
        
        
        return zulutime;
    }
    
    
    
    public static string displayphone (string fone) {
        //      USE THIS METHOD TO FORMAT PHONE NUMBERS SUBMITTED AFTER "CLEANSING" 
        //      USE IT TO FORMAT PRIOR TO DATABASE QUERIES USING PHONE NUMBERS FOR MATCHING OR FILTERING
        
        string showphone;
        string cleanfone;
        
        if (!string.isblank(fone) && fone.length() == 10){
            showphone = '(' + fone.left(3) + ') ' + fone.substring(3,6) + '-' + fone.substring(6,10);
        }
        
        else {
            cleanfone = morestring.givebacknumbers(fone);
        }
        
        if (!string.isblank(cleanfone) && cleanfone.length() == 10) {
            showphone = '(' + cleanfone.left(3) + ') ' + cleanfone.substring(3,6) + '-' + cleanfone.substring(6,10);
        }
        
        if (string.isblank(showphone)) {
            showphone = fone;
        }
        
        return showphone;  
    }  


    public static string capitalizewords(string userinput) {
        
        string startswithcaps = '';
        string thisword = '';
        
        list <string> words = new list <string>();
        words = userinput.split(' ');
        for (string word : words) {
            if (word.left(1).isalpha() && word.length() > 1) {
                thisword = word.capitalize();   
            }
            else {
                thisword = word;
            }
            startswithcaps += thisword + ' ';            
        }        
        
        startswithcaps = startswithcaps.normalizeSpace();
        
        return startswithcaps;        
        
    }


 
}
